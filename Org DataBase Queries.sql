create database org;
use org; 
create table Customers (CustomerID int Primary Key,
Name varchar(255),
Email varchar(255),
JoinDate date
);

create table Products (
ProductID int primary key,
Name varchar(255),
Category varchar(255),
Price decimal (10,2)
);

create table Orders (
OrderID int primary key,
CustomerID int,
OrderDate Date,
TotalAmount Decimal(10,2)
);

create table OrderDetails (
OrderDetailID int Primary key, 
OrderID int,
ProductID int,
Quantity int,
PricePerUnit decimal (10,2)
);

insert into Customers (CustomerID, Name, Email, JoinDate) values 
(1, 'John Doe', 'johndoe@example.com', '2020-01-10'),
(2, 'Jane Smith', 'janesmith@example.com', '2020-01-15'),
(3, 'Juan Zabala', 'juanzabala@example.com', '2020-01-25'),
(4, 'Faith Goodman', 'faithgoodman@example.com', '2020-02-01'),
(5, 'Sara Morton', 'saram@example.com', '2020-02-10'),
(6, 'Tysheena Adams', 'tadams@example.com', '2020-02-15'),
(7, 'Joe Berg', 'joeberg@example.com', '2020-02-24'),
(8, 'Satya Nadela', 'snadela@example.com', '2020-03-01'),
(9, 'Gautam Phukan', 'gphukan@example.com', '2020-03-03'),
(10, 'Alice Johnson', 'alicejohnson@example.com', '2020-03-05');

insert into Products (ProductID, Name, Category, Price) Values
(1, 'Laptop', 'Electronics', 999.99),
(2, 'Smartphone', 'Electronics', 499.99),
(3, 'Table', 'Furniture', 299.99),
(4, 'Chair', 'Furniture', 109.99),
(5, 'Sofa', 'Furniture', 399.99),
(6, 'A.C.' , 'Electronics', 699.99),
(7, 'Photo Frame', 'Home Decor', 59.99),
(8, 'Night Lamp' , 'Home Decor', 39.99),
(9, 'Double Bed' , 'Furniture' , 299.99),
(10, 'Desk Lamp' , 'Home Decor', 29.99);

insert into Orders (OrderID, CustomerID, OrderDate, TotalAmount) Values
(1, 1, '2020-02-15', 1499.98),
(2,2, '2020-02-17' , 499.99),
(3, 3, '2020-02-19' , 599.99),
(4, 4, '2020-02-24', 699.99),
(5, 5, '2020-03-01', 599.99),
(6, 6, '2020-03-03', 499.99),
(7, 7, '2020-03-05', 299.99),
(8, 8, '2020-03-09', 109.99),
(9, 9, '2020-03-11', 99.99),
(10, 25, '2020-03-21', 78.99);

insert into OrderDetails (OrderDetailID, OrderID, ProductID, Quantity, PricePerUnit) Values
(1, 1, 1, 1, 999.99),
(2, 1, 2, 1, 499.99),
(3, 3, 3, 1, 59.99),
(4, 2, 4, 1, 29.99),
(5, 4, 5, 1, 399.99),
(6, 5, 6, 1, 499.99),
(7, 6, 7, 1, 99.99),
(8, 7, 8, 2, 1599.99),
(9, 8, 9, 3, 299.99),
(10, 25, 50, 2, 29.99);

# 1. Basic Queries:
#1.1 List all cutomers
select Name from Customers;

#1.2 Show all products in the Electronics category
select Name from Products where Category = "Electronics";

#1.3 Find the total numbers of order placed
select count(OrderId) from Orders;

# Display the details of most recent order
select * from Orders order by OrderDate desc limit 1;

#2. Joins and Relationships
#2.1 List all products along with the names of the customers who ordered them.
SELECT p.Name AS ProductName, c.Name AS CustomerName
FROM Products p
JOIN OrderDetails od ON p.ProductID = od.ProductID
JOIN Orders o ON od.OrderID = o.OrderID
JOIN Customers c ON o.CustomerID = c.CustomerID;

#2.2 Show orders that include more than one product
SELECT o.OrderID, COUNT(od.ProductID) AS NumberOfProducts
FROM Orders o
JOIN OrderDetails od ON o.OrderID = od.OrderID
GROUP BY o.OrderID
HAVING COUNT(od.ProductID) > 1;

#2.3 Find the total sales amount for each customer.
SELECT c.CustomerID, c.Name AS CustomerName, SUM(p.Price) AS TotalSalesAmount
FROM Customers c
JOIN Orders o ON c.CustomerID = o.CustomerID
JOIN OrderDetails od ON o.OrderID = od.OrderID
JOIN Products p ON od.ProductID = p.ProductID
GROUP BY c.CustomerID, c.Name;

# 3. Aggregation and Grouping:
    #3.1 Calculate the total revenue generated by each product category.
SELECT p.Category, SUM(od.Quantity * od.PricePerUnit) AS TotalRevenue
FROM Products p
JOIN OrderDetails od ON p.ProductID = od.ProductID
JOIN Orders o ON od.OrderID = o.OrderID
GROUP BY p.Category;

    #3.2 Determine the avaerage order value.
SELECT AVG(TotalAmount) AS AverageOrderValue
FROM Orders;

    #3.3 Find the month with the highest number of orders.
SELECT MONTHNAME(o.OrderDate) AS Month, COUNT(*) AS NumberOfOrders
FROM Orders o
GROUP BY MONTH(o.OrderDate)
ORDER BY NumberOfOrders DESC
LIMIT 1;

#4. Subqueries and nested queries:
    #4.1 Identify customers who have not placed any orders.
SELECT c.CustomerID, c.Name
FROM Customers c
LEFT JOIN Orders o ON c.CustomerID = o.CustomerID
WHERE o.CustomerID IS NULL;

    #4.2 Find products that have never been ordered
SELECT p.ProductID, p.Name
FROM Products p
LEFT JOIN OrderDetails od ON p.ProductID = od.ProductID
WHERE od.ProductID IS NULL;

    #4.3 Show the top 3 best selling products.
SELECT p.ProductID, p.Name, SUM(od.Quantity) AS TotalQuantity
FROM Products p
JOIN OrderDetails od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.Name
ORDER BY TotalQuantity DESC
LIMIT 3;

#5. Date and Time Functions:
    #5.1 List orders placed in the last month.
SELECT OrderID, OrderDate
FROM Orders
WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);

	#5.2 Determine the oldest customer in terms of membership duration.
SELECT CustomerID, Name, JoinDate
FROM Customers
ORDER BY JoinDate
LIMIT 1;

#6. Advanced Queries:
    #6.1 Rank customers based on their total spending.
SELECT c.CustomerID, c.Name, SUM(o.TotalAmount) AS TotalSpending
FROM Customers c
JOIN Orders o ON c.CustomerID = o.CustomerID
GROUP BY c.CustomerID, c.Name
ORDER BY TotalSpending DESC;

    #6.2 Identify the most popular product category.
SELECT p.Category, SUM(od.Quantity) AS TotalQuantity
FROM Products p
JOIN OrderDetails od ON p.ProductID = od.ProductID
GROUP BY p.Category
ORDER BY TotalQuantity DESC
LIMIT 1;

    #6.3 Calculate the month over month growth rate in sales.
    SELECT 
    DATE_FORMAT(o.OrderDate, '%Y-%m') AS YearMonth,
    SUM(o.TotalAmount) AS TotalSales,
    LAG(SUM(o.TotalAmount)) OVER (ORDER BY DATE_FORMAT(o.OrderDate, '%Y-%m')) AS PreviousMonthSales,
    (SUM(o.TotalAmount) - LAG(SUM(o.TotalAmount)) OVER (ORDER BY DATE_FORMAT(o.OrderDate, '%Y-%m'))) / LAG(SUM(o.TotalAmount)) OVER (ORDER BY DATE_FORMAT(o.OrderDate, '%Y-%m')) AS GrowthRate
FROM Orders o
GROUP BY DATE_FORMAT(o.OrderDate, '%Y-%m')
ORDER BY DATE_FORMAT(o.OrderDate, '%Y-%m');
    
#7. Data Manipulation and Updates:
    #7.1 Add a new customer to the customers table.
    INSERT INTO Customers (CustomerID, Name, Email, JoinDate) 
VALUES (11, 'Mukesh Ambani', 'mambani@example.com', '2022-04-01');

    #7.2. Update the price of a specific product.
    UPDATE Products
SET Price = 151.99
WHERE ProductID = 1;
